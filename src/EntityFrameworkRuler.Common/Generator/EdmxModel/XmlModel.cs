/*
 Autogenerated by http://xmltocsharp.azurewebsites.net/ and modified by Mark Randell

 Licensed under the Apache License, Version 2.0
 http://www.apache.org/licenses/LICENSE-2.0
 */

using System.Diagnostics;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Xml.Schema;
using System.Xml.Serialization;
using EntityFrameworkRuler.Generator.Services;

#pragma warning disable CS1591

namespace EntityFrameworkRuler.Generator.EdmxModel;

#pragma warning disable CA2227
#pragma warning disable SA1402
#pragma warning disable SA1124
#pragma warning disable CA1002
#pragma warning disable SA1649

/// <summary> Represents an enumeration that specifies three options indicating whether the column in the store schema definition language </summary>
public enum EfrStoreGeneratedPattern {
    /// <summary> A value indicating that it is not a server generated property. This is the default value. </summary>
    None = 0,

    /// <summary> A value is generated on insert and remains unchanged on update. </summary>
    Identity = 1,

    /// <summary> A value is generated on both insert and update. </summary>
    Computed = 2
}

public interface IPropertyRef {
    string Name { get; set; }
}

public interface IConstraintEnd : IEquatable<IConstraintEnd> {
    IEnumerable<IPropertyRef> Properties { get; }
    string Role { get; set; }
}

public abstract class ConstraintEnd : IConstraintEnd {
    public abstract IEnumerable<IPropertyRef> Properties { get; }

    [XmlAttribute(AttributeName = "Role")]
    public string Role { get; set; }

    public bool Equals(IConstraintEnd other) {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return Role == other.Role && PropertiesAreEqual(this, other);
    }

    public override bool Equals(object obj) => ReferenceEquals(this, obj) || (obj is IConstraintEnd other && Equals(other));

    private static bool PropertiesAreEqual(IConstraintEnd p1, IConstraintEnd p2) {
        using var props2 = p2.Properties.GetEnumerator();
        foreach (var prop1Ref in p1.Properties) {
            if (!props2.MoveNext()) return false;
            if (props2.Current?.Name != prop1Ref.Name) return false;
        }

        return true;
    }

    // ReSharper disable once NonReadonlyMemberInGetHashCode
    public override int GetHashCode() => HashCode.Combine(Properties, Role);
    public static bool operator ==(ConstraintEnd left, ConstraintEnd right) => Equals(left, right);
    public static bool operator !=(ConstraintEnd left, ConstraintEnd right) => !Equals(left, right);
    public static bool operator ==(ConstraintEnd left, IConstraintEnd right) => Equals(left, right);
    public static bool operator !=(ConstraintEnd left, IConstraintEnd right) => !Equals(left, right);
    public static bool operator ==(IConstraintEnd left, ConstraintEnd right) => Equals(left, right);
    public static bool operator !=(IConstraintEnd left, ConstraintEnd right) => !Equals(left, right);
}

public interface IReferentialConstraint : IEquatable<IReferentialConstraint> {
    IConstraintEnd Principal { get; }
    IConstraintEnd Dependent { get; }
    bool IsConceptual { get; }
}

public abstract class ReferentialConstraintBase : IReferentialConstraint {
    [XmlIgnore]
    IConstraintEnd IReferentialConstraint.Principal => GetPrincipal();

    protected abstract IConstraintEnd GetPrincipal();

    [XmlIgnore]
    IConstraintEnd IReferentialConstraint.Dependent => GetDependent();

    public abstract bool IsConceptual { get; }

    protected abstract IConstraintEnd GetDependent();

    public bool Equals(IReferentialConstraint other) {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;

        var p1 = GetPrincipal();
        var p2 = other.Principal;
        if (p1 == null || p2 == null) return false;
        if (!p1.Equals(p2)) return false;
        var d1 = GetDependent();
        var d2 = other.Dependent;
        if (d1 == null || d2 == null) return false;
        return d1.Equals(d2);
    }

    public override int GetHashCode() => HashCode.Combine(GetPrincipal()?.Role, GetDependent()?.Role);
    public static bool operator ==(ReferentialConstraintBase left, ReferentialConstraintBase right) => Equals(left, right);
    public static bool operator !=(ReferentialConstraintBase left, ReferentialConstraintBase right) => !Equals(left, right);
    public static bool operator ==(ReferentialConstraintBase left, IReferentialConstraint right) => Equals(left, right);
    public static bool operator !=(ReferentialConstraintBase left, IReferentialConstraint right) => !Equals(left, right);
    public static bool operator ==(IReferentialConstraint left, ReferentialConstraintBase right) => Equals(left, right);
    public static bool operator !=(IReferentialConstraint left, ReferentialConstraintBase right) => !Equals(left, right);
    public override bool Equals(object obj) => ReferenceEquals(this, obj) || (obj is IReferentialConstraint other && Equals(other));
}

#region storage elements

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "EntityType", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageEntityType {
    [XmlElement(ElementName = "Key", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public StorageEntityKey Key { get; set; }

    [XmlElement(ElementName = "Property", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageProperty> Properties { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[XmlRoot(ElementName = "Key", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageEntityKey {
    [XmlElement(ElementName = "PropertyRef", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StoragePropertyRef> PropertyRefs { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "Property", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageProperty {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Type")]
    public string Type { get; set; }

    /// <summary>
    /// enum based on System.Data.Metadata.Edm.StoreGeneratedPattern with values:
    ///   None = 0,     // A value indicating that it is not a server generated property. This is the default value.
    ///   Identity = 1, // A value is generated on insert and remains unchanged on update.
    ///   Computed = 2  // A value is generated on both insert and update.
    /// </summary>
    [XmlAttribute(AttributeName = "StoreGeneratedPattern")]
    public string StoreGeneratedPattern { get; set; }

    public EfrStoreGeneratedPattern GetStoreGeneratedPattern() {
        return StoreGeneratedPattern switch {
            "Computed" => EfrStoreGeneratedPattern.Computed,
            "Identity" => EfrStoreGeneratedPattern.Identity,
            "None" => EfrStoreGeneratedPattern.None,
            null => EfrStoreGeneratedPattern.None,
#if DEBUG
            _ => throw new ArgumentOutOfRangeException($"Unknown StoreGeneratedPattern value: {StoreGeneratedPattern}")
#else
            _ => EfrStoreGeneratedPattern.None
#endif
        };
    }

    [XmlAttribute(AttributeName = "Nullable")]
    public string Nullable { get; set; }

    [XmlAttribute(AttributeName = "MaxLength")]
    public string MaxLength { get; set; }

    [XmlAttribute(AttributeName = "Precision")]
    public string Precision { get; set; }

    [XmlAttribute(AttributeName = "Scale")]
    public string Scale { get; set; }

    // #region naming cache
    //
    // /// <summary> internal use only to cache the expected EF Core identifier </summary>
    // private NamingCache<string> expectedEfCoreName;
    //
    // string IEntityProperty.GetExpectedEfCoreName(IRulerNamingService namingService) {
    //     return expectedEfCoreName.GetValue(namingService);
    // }
    //
    // string IEntityProperty.SetExpectedEfCoreName(IRulerNamingService namingService, string value) {
    //     expectedEfCoreName = new(namingService, value);
    //     return value;
    // }
    //
    // string IEntityProperty.GetName(bool conceptualPreferred = true) => Name;
    //
    // #endregion
}

[DebuggerDisplay("Role={Role} Type={Type} Multiplicity={Multiplicity}")]
[XmlRoot(ElementName = "End", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageEnd {
    [XmlAttribute(AttributeName = "Role")]
    public string Role { get; set; }

    [XmlAttribute(AttributeName = "Type")]
    public string Type { get; set; }

    [XmlAttribute(AttributeName = "Multiplicity")]
    public string Multiplicity { get; set; }

    [XmlElement(ElementName = "OnDelete", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageOnDelete> OnDelete { get; set; }

    [XmlAttribute(AttributeName = "EntitySet")]
    public string EntitySet { get; set; }
}

[DebuggerDisplay("ConstraintEnd Role {Role}")]
[XmlRoot(ElementName = "Principal", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageConstraintEnd : ConstraintEnd {
    [XmlElement(ElementName = "PropertyRef", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StoragePropertyRef> PropertyRefs { get; set; }

    [XmlIgnore]
    public override IEnumerable<IPropertyRef> Properties => PropertyRefs;
}

[DebuggerDisplay("Storage FK Principal {Principal} Dependent {Dependent}")]
[XmlRoot(ElementName = "ReferentialConstraint", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageReferentialConstraint : ReferentialConstraintBase {
    [XmlElement(ElementName = "Principal", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public StorageConstraintEnd Principal { get; set; }

    [XmlElement(ElementName = "Dependent", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public StorageConstraintEnd Dependent { get; set; }

    public override bool IsConceptual => false;

    protected override IConstraintEnd GetPrincipal() => Principal;
    protected override IConstraintEnd GetDependent() => Dependent;
}

[DebuggerDisplay("StorageAssociation {Name}")]
[XmlRoot(ElementName = "Association", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageAssociation {
    [XmlElement(ElementName = "End", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageEnd> Ends { get; set; }

    [XmlElement(ElementName = "ReferentialConstraint", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public StorageReferentialConstraint ReferentialConstraint { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[XmlRoot(ElementName = "OnDelete", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageOnDelete {
    [XmlAttribute(AttributeName = "Action")]
    public string Action { get; set; }
}

[DebuggerDisplay("StorageParameter {Name}")]
[XmlRoot(ElementName = "Parameter", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageParameter {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Type")]
    public string Type { get; set; }

    [XmlAttribute(AttributeName = "Mode")]
    public string Mode { get; set; }
}

[DebuggerDisplay("StoragePropertyRef {Name}")]
[XmlRoot(ElementName = "PropertyRef", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StoragePropertyRef : IPropertyRef {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[DebuggerDisplay("StorageFunction {Name}")]
[XmlRoot(ElementName = "Function", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageFunction {
    [XmlElement(ElementName = "Parameter", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageParameter> Parameter { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Aggregate")]
    public string Aggregate { get; set; }

    [XmlAttribute(AttributeName = "BuiltIn")]
    public string BuiltIn { get; set; }

    [XmlAttribute(AttributeName = "NiladicFunction")]
    // ReSharper disable once IdentifierTypo
    public string NiladicFunction { get; set; }

    [XmlAttribute(AttributeName = "IsComposable")]
    public string IsComposable { get; set; }

    [XmlAttribute(AttributeName = "ParameterTypeSemantics")]
    public string ParameterTypeSemantics { get; set; }

    [XmlAttribute(AttributeName = "Schema")]
    public string Schema { get; set; }

    [XmlAttribute(AttributeName = "StoreFunctionName")]
    public string StoreFunctionName { get; set; }
}

[DebuggerDisplay("StorageEntitySet {Name}")]
[XmlRoot(ElementName = "EntitySet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageEntitySet {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "EntityType")]
    public string EntityType { get; set; }

    [XmlAttribute]
    public string Schema { get; set; }

    [XmlAttribute(
        "Schema",
        Form = XmlSchemaForm.Qualified,
        Namespace = "http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator")]
    public string Schema1 { get; set; }

    /// <summary> Expected value Tables or Views identifies the kind of database object </summary>
    [XmlAttribute(
        AttributeName = "Type",
        Namespace = "http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator")]
    public string Type { get; set; }

    [XmlElement(ElementName = "DefiningQuery", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public string DefiningQuery { get; set; }
}

[DebuggerDisplay("StorageAssociationSet {Name} Association={Association}")]
[XmlRoot(ElementName = "AssociationSet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageAssociationSet {
    [XmlElement(ElementName = "End", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageEnd> End { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Association")]
    public string Association { get; set; }
}

[XmlRoot(ElementName = "EntityContainer", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageEntityContainer {
    [XmlElement(ElementName = "EntitySet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageEntitySet> EntitySets { get; set; }

    [XmlElement(ElementName = "AssociationSet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageAssociationSet> AssociationSets { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[DebuggerDisplay("{Namespace}")]
[XmlRoot(ElementName = "Schema", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
public class StorageSchema {
    [XmlElement(ElementName = "EntityType", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageEntityType> EntityTypes { get; set; }

    [XmlElement(ElementName = "Association", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageAssociation> Associations { get; set; }

    [XmlElement(ElementName = "Function", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageFunction> Functions { get; set; }

    [XmlElement(ElementName = "EntityContainer", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public List<StorageEntityContainer> EntityContainers { get; set; }

    [XmlAttribute(AttributeName = "Namespace")]
    public string Namespace { get; set; }

    [XmlAttribute(AttributeName = "Provider")]
    public string Provider { get; set; }

    [XmlAttribute(AttributeName = "ProviderManifestToken")]
    public string ProviderManifestToken { get; set; }

    [XmlAttribute(AttributeName = "Alias")]
    public string Alias { get; set; }

    [XmlAttribute(AttributeName = "store", Namespace = "http://www.w3.org/2000/xmlns/")]
    public string Store { get; set; }

    [XmlAttribute(AttributeName = "customannotation", Namespace = "http://www.w3.org/2000/xmlns/")]
    public string CustomAnnotation { get; set; }

    [XmlAttribute(AttributeName = "xmlns")]
    public string Xmlns { get; set; }
}

[XmlRoot(ElementName = "StorageModels", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class StorageModels {
    [XmlElement(ElementName = "Schema", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl")]
    public StorageSchema Schema { get; set; }
}

#endregion

#region conceptual elements

[XmlRoot(ElementName = "EntitySet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualEntitySet {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "EntityType")]
    public string EntityType { get; set; }
}

[DebuggerDisplay("{Role} Type={Type} Multiplicity={Multiplicity}")]
[XmlRoot(ElementName = "End", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualEnd {
    [XmlAttribute(AttributeName = "Role")]
    public string Role { get; set; }

    [XmlAttribute(AttributeName = "EntitySet")]
    public string EntitySet { get; set; }

    [XmlAttribute(AttributeName = "Type")]
    public string Type { get; set; }

    [XmlAttribute(AttributeName = "Multiplicity")]
    public string Multiplicity { get; set; }

    [XmlElement(ElementName = "OnDelete", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualOnDelete> OnDelete { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "AssociationSet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualAssociationSet {
    [XmlElement(ElementName = "End", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualEnd> End2 { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Association")]
    public string Association { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "Parameter", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualParameter {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Mode")]
    public string Mode { get; set; }

    [XmlAttribute(AttributeName = "Type")]
    public string Type { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "FunctionImport", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualFunctionImport {
    [XmlElement(ElementName = "Parameter", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualParameter> Parameters { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "ReturnType")]
    public string ReturnType { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "EntityContainer", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualEntityContainer {
    [XmlElement(ElementName = "EntitySet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualEntitySet> EntitySets { get; set; }

    [XmlElement(ElementName = "AssociationSet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualAssociationSet> AssociationSets { get; set; }

    [XmlElement(ElementName = "FunctionImport", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualFunctionImport> FunctionImport { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(
        AttributeName = "LazyLoadingEnabled",
        Namespace = "http://schemas.microsoft.com/ado/2009/02/edm/annotation")]
    public string LazyLoadingEnabled { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "Property", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualProperty : IPropertyRef {
    [XmlAttribute(AttributeName = "Type")]
    public string Type { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Nullable")]
    public string Nullable { get; set; }

    [XmlAttribute(AttributeName = "Precision")]
    public string Precision { get; set; }

    [XmlAttribute(AttributeName = "MaxLength")]
    public string MaxLength { get; set; }

    [XmlAttribute(AttributeName = "Scale")]
    public string Scale { get; set; }

    /// <summary>
    /// enum based on System.Data.Metadata.Edm.StoreGeneratedPattern with values:
    ///   None = 0,     // A value indicating that it is not a server generated property. This is the default value.
    ///   Identity = 1, // A value is generated on insert and remains unchanged on update.
    ///   Computed = 2  // A value is generated on both insert and update.
    /// </summary>
    [XmlAttribute(
        AttributeName = "StoreGeneratedPattern",
        Namespace = "http://schemas.microsoft.com/ado/2009/02/edm/annotation")]
    public string StoreGeneratedPattern { get; set; }

    public EfrStoreGeneratedPattern GetStoreGeneratedPattern() {
        return StoreGeneratedPattern switch {
            "Computed" => EfrStoreGeneratedPattern.Computed,
            "Identity" => EfrStoreGeneratedPattern.Identity,
            "None" => EfrStoreGeneratedPattern.None,
            null => EfrStoreGeneratedPattern.None,
#if DEBUG
            _ => throw new ArgumentOutOfRangeException($"Unknown StoreGeneratedPattern value: {StoreGeneratedPattern}")
#else
            _ => EfrStoreGeneratedPattern.None
#endif
        };
    }

    [XmlAttribute(AttributeName = "FixedLength")]
    public string FixedLength { get; set; }

    [XmlAttribute(AttributeName = "Unicode")]
    public string Unicode { get; set; }

    [XmlAttribute(AttributeName = "ConcurrencyMode")]
    public string ConcurrencyMode { get; set; }

    [XmlAttribute(AttributeName = "xmlns")]
    public string Xmlns { get; set; }

    [XmlAttribute(AttributeName = "annotation", Namespace = "http://www.w3.org/2000/xmlns/")]
    public string Annotation { get; set; }

    [XmlElement(ElementName = "Documentation", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualDocumentation Documentation { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "ComplexType", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ComplexType {
    [XmlElement(ElementName = "Property", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualProperty> Property2 { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "Member", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualEnumMember {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Value")]
    public string Value { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "EnumType", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualEnumType {
    [XmlElement(ElementName = "Member", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualEnumMember> Members { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(
        AttributeName = "ExternalTypeName",
        Namespace = "http://schemas.microsoft.com/ado/2006/04/codegeneration")]
    public string ExternalTypeName { get; set; }

    [XmlAttribute(AttributeName = "a", Namespace = "http://www.w3.org/2000/xmlns/")]
    public string A { get; set; }

    [XmlAttribute(AttributeName = "UnderlyingType")]
    public string UnderlyingType { get; set; }

    [XmlAttribute(AttributeName = "IsFlags")]
    public string IsFlags { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "PropertyRef", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualPropertyRef : IPropertyRef {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[XmlRoot(ElementName = "Key", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualEntityKey {
    [XmlElement(ElementName = "PropertyRef", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualPropertyRef> PropertyRefs { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "NavigationProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualNavigationProperty : IPropertyRef {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "Relationship")]
    public string Relationship { get; set; }

    [XmlAttribute(AttributeName = "FromRole")]
    public string FromRole { get; set; }

    [XmlAttribute(AttributeName = "ToRole")]
    public string ToRole { get; set; }

    [XmlElement(ElementName = "Documentation", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualDocumentation Documentation { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "EntityType", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualEntityType {
    [XmlElement(ElementName = "Key", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualEntityKey Key { get; set; }

    [XmlElement(ElementName = "Property", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualProperty> Properties { get; set; }

    [XmlElement(ElementName = "NavigationProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualNavigationProperty> NavigationProperties { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlElement(ElementName = "Documentation", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualDocumentation Documentation { get; set; }

    [XmlAttribute(AttributeName = "Abstract")]
    public bool Abstract { get; set; }

    [XmlAttribute(AttributeName = "BaseType")]
    public string BaseType { get; set; }
}

[XmlRoot(ElementName = "Documentation", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualDocumentation {
    [XmlElement(ElementName = "Summary", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public string Summary { get; set; }

    [XmlElement(ElementName = "LongDescription", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public string LongDescription { get; set; }

    /// <summary> Get the comment text from this documentation object </summary>
    public string GetComment() {
        if (Summary.IsNullOrEmpty() && LongDescription.IsNullOrEmpty()) return null;
        if (Summary.IsNullOrEmpty()) return LongDescription;
        if (LongDescription.IsNullOrEmpty()) return Summary;
        return Summary + Environment.NewLine + LongDescription;
    }
}

[DebuggerDisplay("{Role}")]
[XmlRoot(ElementName = "Principal", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualConstraintEnd : ConstraintEnd {
    [XmlElement(ElementName = "PropertyRef", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualPropertyRef> PropertyRefs { get; set; }

    [XmlIgnore]
    public override IEnumerable<IPropertyRef> Properties => PropertyRefs;
}

[DebuggerDisplay("{Principal} {Dependent}")]
[XmlRoot(ElementName = "ReferentialConstraint", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualReferentialConstraint : ReferentialConstraintBase {
    [XmlElement(ElementName = "Principal", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualConstraintEnd Principal { get; set; }

    [XmlElement(ElementName = "Dependent", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualConstraintEnd Dependent { get; set; }

    public override bool IsConceptual => true;
    protected override IConstraintEnd GetPrincipal() => Principal;
    protected override IConstraintEnd GetDependent() => Dependent;
}

[DebuggerDisplay("{Name} {ReferentialConstraint}")]
[XmlRoot(ElementName = "Association", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualAssociation {
    [XmlElement(ElementName = "End", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualEnd> Ends { get; set; }

    /// <summary>
    /// The foreign key that describes the relationship.  This will be null for associations that span a suppressed
    /// many-to-many junction (because there are actually 2 foreign keys that are abstracted away from the EF model).
    /// </summary>
    [XmlElement(ElementName = "ReferentialConstraint", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualReferentialConstraint ReferentialConstraint { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[XmlRoot(ElementName = "OnDelete", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualOnDelete {
    [XmlAttribute(AttributeName = "Action")]
    public string Action { get; set; }
}

[DebuggerDisplay("{Namespace}")]
[XmlRoot(ElementName = "Schema", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
public class ConceptualSchema {
    [XmlElement(ElementName = "EntityContainer", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualEntityContainer EntityContainer { get; set; }

    [XmlElement(ElementName = "ComplexType", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ComplexType> ComplexTypes { get; set; }

    [XmlElement(ElementName = "EnumType", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualEnumType> EnumTypes { get; set; }

    [XmlElement(ElementName = "EntityType", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualEntityType> EntityTypes { get; set; }

    [XmlElement(ElementName = "Association", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public List<ConceptualAssociation> Associations { get; set; }

    [XmlAttribute(AttributeName = "Namespace")]
    public string Namespace { get; set; }

    [XmlAttribute(AttributeName = "Alias")]
    public string Alias { get; set; }

    [XmlAttribute(
        AttributeName = "UseStrongSpatialTypes",
        Namespace = "http://schemas.microsoft.com/ado/2009/02/edm/annotation")]
    public string UseStrongSpatialTypes { get; set; }

    [XmlAttribute(AttributeName = "xmlns")]
    public string Xmlns { get; set; }

    [XmlAttribute(AttributeName = "annotation", Namespace = "http://www.w3.org/2000/xmlns/")]
    public string Annotation { get; set; }
}

[DebuggerDisplay("{Schema}")]
[XmlRoot(ElementName = "ConceptualModels", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class ConceptualModels {
    [XmlElement(ElementName = "Schema", Namespace = "http://schemas.microsoft.com/ado/2009/11/edm")]
    public ConceptualSchema Schema { get; set; }
}

#endregion

#region mapping elements

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "ScalarProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class ScalarPropertyMapping {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "ColumnName")]
    public string ColumnName { get; set; }
}

[DebuggerDisplay("{StoreEntitySet}")]
[XmlRoot(ElementName = "MappingFragment", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class MappingFragment {
    [XmlElement(ElementName = "ScalarProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<ScalarPropertyMapping> ScalarProperties { get; set; }

    [XmlAttribute(AttributeName = "StoreEntitySet")]
    public string StoreEntitySet { get; set; }

    [XmlElement(ElementName = "Condition", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public MappingCondition Condition { get; set; }
}

[XmlRoot(ElementName = "Condition", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class MappingCondition {
    [XmlAttribute(AttributeName = "ColumnName")]
    public string ColumnName { get; set; }

    [XmlAttribute(AttributeName = "Value")]
    public string Value { get; set; }
}

[DebuggerDisplay("{TypeName}")]
[XmlRoot(ElementName = "EntityTypeMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class EntityTypeMapping {
    [XmlElement(ElementName = "MappingFragment", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<MappingFragment> MappingFragments { get; set; }

    [XmlAttribute(AttributeName = "TypeName")]
    public string TypeName { get; set; }
}

[DebuggerDisplay("{Name}")]
[XmlRoot(ElementName = "EntitySetMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class EntitySetMapping {
    [XmlElement(ElementName = "EntityTypeMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<EntityTypeMapping> EntityTypeMappings { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[DebuggerDisplay("{Name} TypeName={TypeName}")]
[XmlRoot(ElementName = "AssociationSetMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class AssociationSetMapping {
    [XmlElement(ElementName = "EndProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<MappingEndProperty> EndProperties { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    /// <summary> The full name of the entity with code namespace </summary>
    [XmlAttribute(AttributeName = "TypeName")]
    public string TypeName { get; set; }

    private (string namespaceName, string name)? typeNamespaceAndName;

    [XmlAttribute(AttributeName = "StoreEntitySet")]
    public string StoreEntitySet { get; set; }

    [IgnoreDataMember, JsonIgnore, XmlIgnore]
    public (string namespaceName, string name) TypeNamespaceAndName =>
        typeNamespaceAndName ??= TypeName.SplitNamespaceAndName();
}

[DebuggerDisplay("{Name} ScalarProperty={ScalarProperties}")]
[XmlRoot(ElementName = "EndProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class MappingEndProperty {
    [XmlElement(ElementName = "ScalarProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<MappingScalarProperty> ScalarProperties { get; set; }

    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
}

[DebuggerDisplay("{Name} ColumnName={ColumnName}")]
[XmlRoot(ElementName = "ScalarProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class MappingScalarProperty {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }

    [XmlAttribute(AttributeName = "ColumnName")]
    public string ColumnName { get; set; }
}

[DebuggerDisplay("{TypeName}")]
[XmlRoot(ElementName = "ComplexTypeMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class ComplexTypeMapping {
    [XmlElement(ElementName = "ScalarProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<ScalarPropertyMapping> ScalarProperty { get; set; }

    [XmlAttribute(AttributeName = "TypeName")]
    public string TypeName { get; set; }
}

[DebuggerDisplay("{ComplexTypeMapping}")]
[XmlRoot(ElementName = "ResultMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class ResultMapping {
    [XmlElement(ElementName = "ComplexTypeMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public ComplexTypeMapping ComplexTypeMapping { get; set; }
}

[DebuggerDisplay("{FunctionName}")]
[XmlRoot(ElementName = "FunctionImportMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class FunctionImportMapping {
    [XmlElement(ElementName = "ResultMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public ResultMapping ResultMapping { get; set; }

    [XmlAttribute(AttributeName = "FunctionImportName")]
    public string FunctionImportName { get; set; }

    [XmlAttribute(AttributeName = "FunctionName")]
    public string FunctionName { get; set; }
}

[DebuggerDisplay("{StorageEntityContainer}")]
[XmlRoot(ElementName = "EntityContainerMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class EntityContainerMapping {
    [XmlElement(ElementName = "EntitySetMapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<EntitySetMapping> EntitySetMappings { get; set; }

    [XmlElement(ElementName = "AssociationSetMapping",
        Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<AssociationSetMapping> AssociationSetMapping { get; set; }

    [XmlElement(
        ElementName = "FunctionImportMapping",
        Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public List<FunctionImportMapping> FunctionImportMappings { get; set; }

    [XmlAttribute(AttributeName = "StorageEntityContainer")]
    public string StorageEntityContainer { get; set; }

    [XmlAttribute(AttributeName = "CdmEntityContainer")]
    public string CdmEntityContainer { get; set; }
}

[DebuggerDisplay("{EntityContainerMapping}")]
[XmlRoot(ElementName = "Mapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
public class Mapping {
    [XmlElement(
        ElementName = "EntityContainerMapping",
        Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public EntityContainerMapping EntityContainerMapping { get; set; }

    [XmlAttribute(AttributeName = "Space")]
    public string Space { get; set; }

    [XmlAttribute(AttributeName = "xmlns")]
    public string Xmlns { get; set; }
}

[DebuggerDisplay("{Mapping}")]
[XmlRoot(ElementName = "Mappings", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class Mappings {
    [XmlElement(ElementName = "Mapping", Namespace = "http://schemas.microsoft.com/ado/2009/11/mapping/cs")]
    public Mapping Mapping { get; set; }
}

#endregion

#region designer elements (commented out as not needed yet)

/*
[XmlRoot(ElementName = "DesignerProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class DesignerProperty {
    [XmlAttribute(AttributeName = "Name")]
    public string Name { get; set; }
    [XmlAttribute(AttributeName = "Value")]
    public string Value { get; set; }
}

[XmlRoot(ElementName = "DesignerInfoPropertySet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class DesignerInfoPropertySet {
    [XmlElement(ElementName = "DesignerProperty", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public List<DesignerProperty> DesignerProperty { get; set; }
}

[XmlRoot(ElementName = "Connection", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class Connection {
    [XmlElement(ElementName = "DesignerInfoPropertySet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public DesignerInfoPropertySet DesignerInfoPropertySet { get; set; }
}

[XmlRoot(ElementName = "Options", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class Options {
    [XmlElement(ElementName = "DesignerInfoPropertySet", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public DesignerInfoPropertySet DesignerInfoPropertySet { get; set; }
}

[XmlRoot(ElementName = "Designer", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class Designer {
    [XmlElement(ElementName = "Connection", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public Connection Connection { get; set; }
    [XmlElement(ElementName = "Options", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public Options Options { get; set; }
    [XmlElement(ElementName = "Diagrams", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public string Diagrams { get; set; }
}
*/

#endregion

[DebuggerDisplay("{ConceptualModels} {StorageModels}")]
[XmlRoot(ElementName = "Runtime", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class Runtime {
    [XmlElement(ElementName = "StorageModels", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public StorageModels StorageModels { get; set; }

    [XmlElement(ElementName = "ConceptualModels", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public ConceptualModels ConceptualModels { get; set; }

    [XmlElement(ElementName = "Mappings", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public Mappings Mappings { get; set; }
}

[DebuggerDisplay("{Runtime}")]
[XmlRoot(ElementName = "Edmx", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
public class EdmxRoot {
    [XmlElement(ElementName = "Runtime", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public Runtime Runtime { get; set; }

    [XmlAttribute(AttributeName = "Version")]
    public string Version { get; set; }

    [XmlAttribute(AttributeName = "edmx", Namespace = "http://www.w3.org/2000/xmlns/")]
    public string Edmx { get; set; }

    #region designer property (commented out as not needed yet)

    /*
    [XmlElement(ElementName = "Designer", Namespace = "http://schemas.microsoft.com/ado/2009/11/edmx")]
    public Designer Designer { get; set; }
     */

    #endregion
}
#pragma warning restore SA1402
#pragma warning restore SA1124
#pragma warning restore CA2227
#pragma warning restore CA1002
#pragma warning restore SA1649