<#@ template hostSpecific="true" debug="true" #>
<#@ assembly name="EntityFrameworkRuler.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="Model" type="EntityFrameworkRuler.Design.Metadata.ModelEx" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ parameter name="ProjectDefaultNamespace" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Infrastructure" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Scaffolding" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Metadata.Builders" #>
<#@ import namespace="EntityFrameworkRuler.Design.Metadata" #>
<#@ import namespace="System.Data" #>
<#
    //System.Diagnostics.Debugger.Launch();
            //System.Diagnostics.Debugger.Break();

            if (!ProductInfo.GetVersion().StartsWith("7.0")) {
                Warning(
                    "Your templates were created using an older version of Entity Framework. Additional features and bug fixes may be available. See https://aka.ms/efcore-docs-updating-templates for more information.");
            }

            var services = (IServiceProvider)Host;
            var providerCode = services.GetRequiredService<IProviderConfigurationCodeGenerator>();
            var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
            var code = services.GetRequiredService<ICSharpHelper>();

            var usings = new List<string> {
                "System",
                "System.Collections.Generic",
                "Microsoft.EntityFrameworkCore",
                "System.Threading",
                "System.Threading.Tasks",
            };

            if (NamespaceHint != Options.ModelNamespace
                && !string.IsNullOrEmpty(Options.ModelNamespace)) {
                usings.Add(Options.ModelNamespace);
            }
            usings.Add(typeof(EntityTypeBuilder<>).Namespace);

            ISet<SqlDbType> ScaleTypes = new HashSet<SqlDbType> {
                SqlDbType.Decimal,
                SqlDbType.Money,
                SqlDbType.SmallMoney,
            };
            ISet<SqlDbType> VarTimeTypes = new HashSet<SqlDbType> {
                SqlDbType.DateTimeOffset,
                SqlDbType.DateTime2,
                SqlDbType.Time,
            };
            ISet<SqlDbType> LengthRequiredTypes = new HashSet<SqlDbType> {
                SqlDbType.Binary,
                SqlDbType.VarBinary,
                SqlDbType.Char,
                SqlDbType.VarChar,
                SqlDbType.NChar,
                SqlDbType.NVarChar,
            };

            if (!string.IsNullOrEmpty(NamespaceHint)) {
#>
namespace <#= NamespaceHint #>;

<#
            }
#>
public partial class <#= Options.ContextName #>
{    
<#
            var anyConfiguration = false;
            StringBuilder mainEnvironment;
            foreach (var function in Model.GetFunctions()) {
                if (function?.Name != null && function.CommandText != null && function.ReturnType != null) {
                    anyConfiguration = true;
                    // Save all previously generated code, and start generating into a new temporary environment
                    mainEnvironment = GenerationEnvironment;
                    GenerationEnvironment = new StringBuilder();

                    bool anyFunctionConfiguration = false;

                    var paramStrings = function.GetParameters().Where(p => !p.IsOutput)
                        .Select(p => $"{code.Reference(p.ClrType ?? typeof(object))} {code.Identifier(p.Name)}")
                        .ToList(); 
#>

    [DbFunction(<#= code.Literal(function.Name) #>, <#= code.Literal(function.Schema) #>)]
<#
                    if (function.IsScalar)
                    {
                        var returnType = paramStrings.First();
                        var parameters = string.Empty;

                        if (function.GetParameters().Count() > 1)
                        {
                            parameters = string.Join(", ", paramStrings.Skip(1));
                        }
#>
    public static <#= returnType #><#= function.Name #>(<#= parameters #>)
    {
        throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
    }
<#  
                    }
                    else
                    {
                        var typeName = $"{function.Name}Result";
                        var returnType = $"IQueryable<{typeName}>";

                        var parameters = string.Empty;

                        if (function.GetParameters().Any())
                        {
                            parameters = string.Join(", ", paramStrings);
                        }
                        var argumentStrings = function.GetParameters()
                            .Select(p => p.Name);
                        var arguments = string.Join(", ", argumentStrings);
#>
    public <#= returnType #> <#= function.Name #>(<#= parameters #>)
    {
        return FromExpression(() => <#= function.Name #>(<#= arguments #>));
    }
<#
                    }
                    anyFunctionConfiguration = true;
#>      
<#
                    // End of function output
#>
<#
                    
                    // If any significant code was generated, append it to the main environment
                    if (anyFunctionConfiguration) {
                        mainEnvironment.Append(GenerationEnvironment);
                        anyConfiguration = true;
                    }

                    // Resume generating code into the main environment
                    GenerationEnvironment = mainEnvironment;
                }
            }

            if (anyConfiguration) {
#>
    protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
    {
<#
                    foreach (var f in Model.GetFunctions())
                    {
                        if (f.FunctionType == FunctionType.Function) {
                            if (f.IsScalar) continue;
                            var result = f.ResultEntities.FirstOrDefault();
                            if (result is null) continue;
#>
        modelBuilder.Entity<<#= result.Name #>>().HasNoKey();
<#
                        }
                        else {
                            if (f.NoResultSet) continue;
                            
                            int i = 1;
                            foreach (var result in f.ResultEntities) {
#>
        modelBuilder.Entity<<#= result.Name #>>().HasNoKey().ToView(null);
<#
                            }
                        }
                    }
                    #>               
    }
<#                
                
                WriteLine("");
            }
#>    
}
<#
            mainEnvironment = GenerationEnvironment;
            GenerationEnvironment = new StringBuilder();

            foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer())) {
#>
using <#= ns #>;
<#
            }

            WriteLine("");

            GenerationEnvironment.Append(mainEnvironment);
#>
