<#@ template hostSpecific="true" debug="true" #>
<#@ assembly name="EntityFrameworkRuler.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="Model" type="EntityFrameworkRuler.Design.Metadata.ModelEx" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ parameter name="ProjectDefaultNamespace" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Infrastructure" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Scaffolding" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Metadata.Builders" #>
<#@ import namespace="EntityFrameworkRuler.Design.Metadata" #>
<#@ import namespace="System.Data" #>
<#
    //System.Diagnostics.Debugger.Launch();
            //System.Diagnostics.Debugger.Break();

            if (!ProductInfo.GetVersion().StartsWith("7.0")) {
                Warning(
                    "Your templates were created using an older version of Entity Framework. Additional features and bug fixes may be available. See https://aka.ms/efcore-docs-updating-templates for more information.");
            }

            var services = (IServiceProvider)Host;
            var providerCode = services.GetRequiredService<IProviderConfigurationCodeGenerator>();
            var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
            var code = services.GetRequiredService<ICSharpHelper>();

            var usings = new List<string> {
                "System",
                "System.Collections.Generic",
                "Microsoft.EntityFrameworkCore",
                "System.Threading",
                "System.Threading.Tasks",
            };

            if (NamespaceHint != Options.ModelNamespace
                && !string.IsNullOrEmpty(Options.ModelNamespace)) {
                usings.Add(Options.ModelNamespace);
            }
            usings.Add(typeof(EntityTypeBuilder<>).Namespace);

            ISet<SqlDbType> ScaleTypes = new HashSet<SqlDbType> {
                SqlDbType.Decimal,
                SqlDbType.Money,
                SqlDbType.SmallMoney,
            };
            ISet<SqlDbType> VarTimeTypes = new HashSet<SqlDbType> {
                SqlDbType.DateTimeOffset,
                SqlDbType.DateTime2,
                SqlDbType.Time,
            };
            ISet<SqlDbType> LengthRequiredTypes = new HashSet<SqlDbType> {
                SqlDbType.Binary,
                SqlDbType.VarBinary,
                SqlDbType.Char,
                SqlDbType.VarChar,
                SqlDbType.NChar,
                SqlDbType.NVarChar,
            };

            if (!string.IsNullOrEmpty(NamespaceHint)) {
#>
namespace <#= NamespaceHint #>;

<#
            }
#>
public static class DbContextExtensions
{
    public static List<T> SqlQuery<T>(this DbContext db, string sql, object[] parameters = null) where T : class
    {
        if (parameters is null)
        {
            parameters = new object[] { };
        }

        if (typeof(T).GetProperties().Any())
        {
            return db.Set<T>().FromSqlRaw(sql, parameters).ToList();
        }
        else
        {
            db.Database.ExecuteSqlRaw(sql, parameters);
            return default;
        }
    }
}

public class OutputParameter<TValue>
{
    private bool _valueSet = false;

    public TValue _value;

    public TValue Value
    {
        get
        {
            if (!_valueSet)
                throw new InvalidOperationException("Value not set.");

            return _value;
        }
    }

    internal void SetValue(object value)
    {
        _valueSet = true;

        _value = null == value || Convert.IsDBNull(value) ? default(TValue) : (TValue)value;
    }
}
<#
            var mainEnvironment = GenerationEnvironment;
            GenerationEnvironment = new StringBuilder();

            foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer())) {
#>
using <#= ns #>;
<#
            }

            WriteLine("");

            GenerationEnvironment.Append(mainEnvironment);

            string AppendValue(Parameter parameter) {
                var value = parameter.IsNullable
                    ? $"{code.Identifier(parameter.Name)} ?? Convert.DBNull"
                    : $"{code.Identifier(parameter.Name)}";
                if (parameter.IsOutput) {
                    value = parameter.IsNullable
                        ? $"{code.Identifier(parameter.Name)}?._value ?? Convert.DBNull"
                        : $"{code.Identifier(parameter.Name)}?._value";
                }

                return ($"Value = {value},");
            }
            string GenerateMultiResultStatement(EntityFrameworkRuler.Design.Metadata.Function function)
            {
                if (function.Results.Count == 1) return null;

                var ids = new List<string>();
                int i = 1;
                foreach (var _ in function.Results)
                {
                    var suffix = $"{i++}";
                    var typeName = function.Name + "Result" + suffix;
                    ids.Add($"(await reader.ReadAsync<{typeName}>()).ToList()");
                }

                return $"({string.Join(", ", ids)})";
            }
            bool IsScaleType(SqlDbType sqlDbType) {
                return ScaleTypes.Contains(sqlDbType);
            }

            bool IsVarTimeType(SqlDbType sqlDbType) {
                return VarTimeTypes.Contains(sqlDbType);
            }

            bool IsLengthRequiredType(SqlDbType sqlDbType) {
                return LengthRequiredTypes.Contains(sqlDbType);
            }
#>
